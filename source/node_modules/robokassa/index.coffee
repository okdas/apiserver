crypto= require 'crypto'
md5= (s) ->
    hash= crypto.createHash 'md5'
    hash.update s
    hash.digest 'hex'



module.exports= class Robokassa

    constructor: (config) ->

        @merchant= config.merchant
        @pass1= config.pass1
        @pass2= config.pass2



    buildPayment: (data, done) ->
        payment=
            MrchLogin: @merchant
            OutSum: data.amount
            InvId: data.id
            SignatureValue: md5 "#{@merchant}:#{data.amount}:#{data.id}:#{@pass1}"

        return payment if not done or not (done instanceof Function)
        return done null, payment


    checkPayment: (data, done) ->
        err= data.SignatureValue != md5 "#{@merchant}:#{data.OutSum}:#{data.InvId}:#{@pass1}"

        return done err, data



    buildPaymentSuccess: (data, done) ->
        payment=
            OutSum: data.OutSum
            InvId: data.InvId
            SignatureValue: md5 "#{data.OutSum}:#{data.InvId}:#{@pass1}"

        return payment if not done or not (done instanceof Function)
        return done null, payment


    checkPaymentSuccess: (data, done) ->
        err= data.SignatureValue != md5 "#{data.OutSum}:#{data.InvId}:#{@pass1}"

        return done err, data



    buildPaymentResult: (data, done) ->
        result=
            OutSum: data.OutSum
            InvId: data.InvId
            SignatureValue: md5 "#{data.OutSum}:#{data.InvId}:#{@pass2}"

        return result if not done or not (done instanceof Function)
        return done null, result


    checkPaymentResult: (data, done) ->
        err= data.SignatureValue != md5 "#{data.OutSum}:#{data.InvId}:#{@pass2}"

        return done err, data
